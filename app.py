# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-4HFpfpAWS8hJ-Hl5QoT7vwQz2cP6EdE
"""

import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import pickle

# Set page configuration
st.set_page_config(page_title="ROE Predictor App", layout="wide")

# --- Load Trained Model ---
@st.cache_resource
def load_model():
    with open('best_model.pkl', 'rb') as file:
        model = pickle.load(file)
    return model

model = load_model()

# --- App Layout: Tabs ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "DuPont Analysis",
    "Data Cleaning",
    "Model Overview",
    "Live ROE Prediction",
    "Custom Input Prediction"
])

# --- Tab 1: DuPont Analysis ---
with tab1:
    st.title("üìö DuPont Analysis Overview")
    st.markdown("""
    **DuPont Analysis** is a method of performance measurement that was started by the DuPont Corporation in the 1920s.

    It breaks Return on Equity (ROE) into three parts:
    - **Profit Margin Ratio (PMR)** = Net Income / Revenue
    - **Asset Turnover Ratio (ATR)** = Revenue / Total Assets
    - **Equity Multiplier (EQM)** = Total Assets / Total Equity

    ROE = PMR √ó ATR √ó EQM

    This breakdown helps understand the underlying drivers of company profitability.
    """)

# --- Tab 2: Data Collection and Cleaning ---
with tab2:
    st.title("üßπ Data Collection and Cleaning")
    st.markdown("""
    We collected financial data from **Yahoo Finance** and **EDGAR**.

    **Data Cleaning Steps:**
    - Handled missing values.
    - Standardized column names.
    - Calculated DuPont components (PMR, ATR, EQM).
    - Normalized input features.

    Only companies with full financials for required years were included.
    """)

# --- Tab 3: Model Overview ---
with tab3:
    st.title("ü§ñ Our Predictive Model")
    st.markdown("""
    We trained a **XGBoost Regressor** to predict next year's ROE based on previous year's DuPont components.

    **Model Details:**
    - Optimized using Grid Search.
    - Random State = 42 for reproducibility.
    - Metrics on Test Set:
        - **Mean Squared Error (MSE)**: ~9.57
        - **R-Squared (R2)**: ~23.46%

    Model predicts ROE given **PMR**, **ATR**, and **EQM** inputs.
    """)

# --- Tab 4: Live ROE Prediction via yFinance ---
with tab4:
    st.title("üîç Live ROE Prediction from Yahoo Finance")

    ticker = st.text_input("Enter a stock ticker (e.g., AAPL, MSFT)", value="AAPL")

    if st.button("Predict ROE for 2024"):
        stock = yf.Ticker(ticker)
        try:
            fin_data = stock.financials
            bal_data = stock.balance_sheet

            # Find column names
            columns = list(fin_data.columns)

            # Find the columns for 2023 and 2024 manually
            col_2023 = None
            col_2024 = None
            for col in columns:
                if '2023' in str(col):
                    col_2023 = col
                if '2024' in str(col):
                    col_2024 = col

            if col_2023 is None or col_2024 is None:
                st.error("Required financial data for 2023 or 2024 not available.")
            else:
                # Extracting 2023 year-end data
                net_income_2023 = fin_data.loc['Net Income', col_2023]
                revenue_2023 = fin_data.loc['Total Revenue', col_2023]
                total_assets_2023 = bal_data.loc['Total Assets', col_2023]
                total_liabilities_2023 = bal_data.loc['Total Liabilities Net Minority Interest', col_2023]
                total_equity_2023 = total_assets_2023 - total_liabilities_2023

                # Calculate 2023 DuPont components
                PMR = net_income_2023 / revenue_2023
                ATR = revenue_2023 / total_assets_2023
                EQM = total_assets_2023 / total_equity_2023

                st.write(f"**Profit Margin Ratio (PMR):** {PMR:.4f}")
                st.write(f"**Asset Turnover Ratio (ATR):** {ATR:.4f}")
                st.write(f"**Equity Multiplier (EQM):** {EQM:.4f}")

                # Predict 2024 ROE
                input_features = pd.DataFrame([[PMR, ATR, EQM]], columns=["PMR", "ATR", "EQM"])
                predicted_roe = model.predict(input_features)[0]
                st.success(f"Predicted ROE for 2024: {predicted_roe:.2%}")

                # Now Extract 2024 year-end data (for actual ROE)
                net_income_2024 = fin_data.loc['Net Income', col_2024]
                total_assets_2024 = bal_data.loc['Total Assets', col_2024]
                total_liabilities_2024 = bal_data.loc['Total Liabilities Net Minority Interest', col_2024]
                total_equity_2024 = total_assets_2024 - total_liabilities_2024

                # Calculate actual 2024 ROE
                roe_actual_2024 = (net_income_2024 / total_equity_2024)
                st.info(f"Actual ROE (2024): {roe_actual_2024:.2%}")

        except Exception as e:
            st.error(f"Error fetching or calculating data: {e}")

# --- Tab 5: Custom Prediction ---
with tab5:
    st.title("üßÆ Predict ROE from Custom Inputs")

    st.markdown("""
    Enter your own DuPont component values to predict ROE.
    """)

    PMR = st.number_input("Profit Margin Ratio (PMR)", min_value=0.0, max_value=1.0, value=0.1, step=0.01)
    ATR = st.number_input("Asset Turnover Ratio (ATR)", min_value=0.0, value=1.0, step=0.01)
    EQM = st.number_input("Equity Multiplier (EQM)", min_value=0.0, value=2.0, step=0.01)

    if st.button("Predict ROE from Inputs"):
        input_custom = pd.DataFrame([[PMR, ATR, EQM]], columns=["PMR", "ATR", "EQM"])
        predicted_custom_roe = model.predict(input_custom)[0]

        st.success(f"Predicted ROE based on inputs: {predicted_custom_roe:.2%}")

# Footer
st.markdown("""
---
Built with ‚ù§Ô∏è by [Your Name] | Financial Analytics Project 2025
""")
